const { InputFile } = require('grammy');

const {
    adminKeyboard, getReturnKeyboard,
    selectQueueKeyboard,
    doWithTable
} = require('../bot/keyboards'); 

const { generateQueueTable, generateBZCHTable } = require('../tables/tables');

const { setPriorityBySurname, getQueue, clearTable } = require('../database/database');


function adminMenuCommand(bot) {
    bot.command('adminmenu', async (ctx) => {
        if (ctx.from.id === 755901230) {
            await ctx.reply("–ú–µ–Ω—é", {
                reply_markup: adminKeyboard
            });
        } else {
            await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É ü§ì‚òùÔ∏è");
        }
    });

    bot.callbackQuery('setPr', async (ctx) => {
        await ctx.answerCallbackQuery();
        await ctx.callbackQuery.message.editText('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:', {
            parse_mode: 'MarkdownV2'
        });

        ctx.session.step = 'waiting_for_prioritySurname';
    })

    bot.callbackQuery('sendMsg', async (ctx) => {
        await ctx.answerCallbackQuery();
        await ctx.callbackQuery.message.editText('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', {
            parse_mode: 'MarkdownV2'
        });

        ctx.session.step = 'waiting_for_adminMessage';
    })

    bot.callbackQuery('queueToChange', async (ctx) => {
        await ctx.answerCallbackQuery();
        await ctx.callbackQuery.message.editText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å', {
            parse_mode: 'MarkdownV2',
            reply_markup: selectQueueKeyboard
        });  
    })

    bot.callbackQuery('changeKprog', async (ctx) => {
        await ctx.answerCallbackQuery();

        await ctx.deleteMessage();

        let status = "";
        const queue = await getQueue('KProg');

        if (queue?.length) {
            await generateQueueTable(queue, 'KProgTable', '–ö–ü—Ä–æ–≥');
            let photoMessage = await ctx.replyWithPhoto(new InputFile("./src/tables/KProgTable.png"));
            ctx.session.QueuePhotoMessageId = photoMessage.message_id;
        } else {
            status = "_–ü–æ–∫–∞ –Ω–∏–∫–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç_";
        }
        

        
        await ctx.reply(`üíª *–û—á–µ—Ä–µ–¥—å –Ω–∞ –ö–ü—Ä–æ–≥\n\n*`+status+"\n\n–í—ã–µ–±–µ—Ä–µ—Ç–µ, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–∞–±–ª–∏—Ü–æ–π:", {
            parse_mode: 'MarkdownV2',
            reply_markup: doWithTable('KProg')
        })
    });

    bot.callbackQuery('changeIsp', async (ctx) => {
        await ctx.answerCallbackQuery();

        await ctx.deleteMessage();

        let status = "";
        const queue = await getQueue('ISP');

        if (queue?.length) {
            await generateQueueTable(queue, 'ISPTable', '–ò–°–ü');
            let photoMessage = await ctx.replyWithPhoto(new InputFile("./src/tables/ISPTable.png"));
            ctx.session.QueuePhotoMessageId = photoMessage.message_id;
        } else {
            status = "_–ü–æ–∫–∞ –Ω–∏–∫–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç_";
        }
        

        
        await ctx.reply(`üíª *–û—á–µ—Ä–µ–¥—å –Ω–∞ –ò–°–ü\n\n*`+status+"\n\n–í—ã–µ–±–µ—Ä–µ—Ç–µ, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–∞–±–ª–∏—Ü–æ–π:", {
            parse_mode: 'MarkdownV2',
            reply_markup: doWithTable('ISP')
        })
    });

    bot.callbackQuery('changePzma', async (ctx) => {
        await ctx.answerCallbackQuery();

        await ctx.deleteMessage();

        let status = "";
        const queue = await getQueue('PZMA');

        if (queue?.length) {
            await generateQueueTable(queue, 'PZMATable', '–ü–ó–ú–ê');
            let photoMessage = await ctx.replyWithPhoto(new InputFile("./src/tables/PZMATable.png"));
            ctx.session.QueuePhotoMessageId = photoMessage.message_id;
        } else {
            status = "_–ü–æ–∫–∞ –Ω–∏–∫–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç_";
        }
        

        
        await ctx.reply(`üíª *–û—á–µ—Ä–µ–¥—å –Ω–∞ –ü–ó–ú–ê\n\n*`+status+"\n\n–í—ã–µ–±–µ—Ä–µ—Ç–µ, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–∞–±–ª–∏—Ü–æ–π:", {
            parse_mode: 'MarkdownV2',
            reply_markup: doWithTable('PZMA')
        })
    });

    bot.callbackQuery('changeMcha', async (ctx) => {
        await ctx.answerCallbackQuery();

        await ctx.deleteMessage();

        let status = "";
        const queue = await getQueue('MCHA');

        if (queue?.length) {
            await generateQueueTable(queue, 'MCHATable', '–ú–ß–ê');
            let photoMessage = await ctx.replyWithPhoto(new InputFile("./src/tables/MCHATable.png"));
            ctx.session.QueuePhotoMessageId = photoMessage.message_id;
        } else {
            status = "_–ü–æ–∫–∞ –Ω–∏–∫–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç_";
        }
        

        
        await ctx.reply(`üíª *–û—á–µ—Ä–µ–¥—å –Ω–∞ –ú–ß–ê\n\n*`+status+"\n\n–í—ã–µ–±–µ—Ä–µ—Ç–µ, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–∞–±–ª–∏—Ü–æ–π:", {
            parse_mode: 'MarkdownV2',
            reply_markup: doWithTable('MCHA')
        })
    });

    bot.callbackQuery('changeBzch', async (ctx) => {
        await ctx.answerCallbackQuery();

        await ctx.deleteMessage();

        let status = "";
        const queue = await getQueue('BZCH');

        if (queue?.length) {
            await generateBZCHTable(queue);
            let photoMessage = await ctx.replyWithPhoto(new InputFile("./src/tables/BZCHTable.png"));
            ctx.session.QueuePhotoMessageId = photoMessage.message_id;
        } else {
            status += "_–í —Ç–∞–±–ª–∏—Ü–µ –µ—â—ë –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç_"
        }
        
        await ctx.reply(`üå° *–û—á–µ—Ä–µ–¥—å –Ω–∞ –ë–ñ–ß\n\n*`+status+"\n\n–í—ã–µ–±–µ—Ä–µ—Ç–µ, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–∞–±–ª–∏—Ü–æ–π:", {
            parse_mode: 'MarkdownV2',
            reply_markup: doWithTable('BZCH')
        })
    });

    bot.callbackQuery(/clear:(.+)/, async (ctx) => {
        await ctx.answerCallbackQuery();
        const tableName = ctx.match[1];

        if (ctx.session.QueuePhotoMessageId) {
            await ctx.api.deleteMessage(ctx.chat.id, ctx.session.QueuePhotoMessageId);
            ctx.session.QueuePhotoMessageId = undefined; 
        }

        clearTable(tableName);
        await ctx.callbackQuery.message.editText(`–¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞`)
    })

    bot.callbackQuery(/deleteUserIn:(.+)/, async (ctx) => {
        await ctx.answerCallbackQuery();
        const tableName = ctx.match[1];

        await ctx.callbackQuery.message.editText(`–ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:`);
        ctx.session.step = `waiting_for_${tableName}ToDelete`;
    })

    bot.callbackQuery(/set(.*)Priority/, async (ctx) => {
        const priority = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö

        const priorities = {
            "Red": "–ö—Ä–∞—Å–Ω—ã–π",
            "Yellow": "–ñ—ë–ª—Ç—ã–π",
            "Green": "–ó–µ–ª—ë–Ω—ã–π",
            "Purple": "–°–∞–Ω–∫—Ü–∏–∏"
        }
        const surname = ctx.session.surname; 
        if (surname) {
            await setPriorityBySurname(surname, priorities[priority]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            await ctx.editMessageText(`–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${surname} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${priorities[priority]}`, {
                reply_markup: getReturnKeyboard(false, 'kprog')
            });
        } else {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–º–∏–ª–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
        }
        ctx.session.step = null; // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    });
}

module.exports = { adminMenuCommand }