const { InputFile } = require("grammy");

const {
  returnToKProg,
  getReturnKeyboard,
  returnToBZCH,
  returnToLessonQueue,
} = require("../bot/keyboards");

const {
  getAllUsers,
  setPriority,
  getBZCHPriorityTable,
  setBZCHPriority,
  getInfoById,
  getQueue,
  isInBZCH,
  getBZCHStatus,
  setPriorityStatus,
  getPriorityForLessonByID,
  setPriorityByBrigadeNum,
} = require("../database/database");

const {
  generatePriorityTable,
  generateBZCHPriorityTable,
  generateQueueTable,
} = require("../tables/tables");
const { lessons } = require("../../data/lessons");
const { getBrigadeNum } = require("../bot/getBrigadeNum");

function priorityCommand(bot) {
  bot.callbackQuery(/priorityInfoFor:(.+)/, async (ctx) => {
    await ctx.answerCallbackQuery();

    const subject = ctx.match[1];
    const lesson = lessons.find((ls) => ls.name === subject);

    if (ctx.session.QueuePhotoMessageId || ctx.session.QueuePhotoMessageIds) {
      try {
        if (ctx.session.QueuePhotoMessageIds) {
          await ctx.api.deleteMessage(
            ctx.chat.id,
            ctx.session.QueuePhotoMessageIds[0]
          );
          await ctx.api.deleteMessage(
            ctx.chat.id,
            ctx.session.QueuePhotoMessageIds[1]
          );
        } else {
          await ctx.api.deleteMessage(
            ctx.chat.id,
            ctx.session.QueuePhotoMessageId
          );
        }
      } catch (error) {
        if (error.message.includes("message can't be deleted for everyone")) {
          console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.");
        } else {
          console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞:", error);
        }
      }
      ctx.session.QueuePhotoMessageId = undefined;
      ctx.session.QueuePhotoMessageIds = undefined;
    }
    try {
      await ctx.deleteMessage();
    } catch (error) {
      if (error.message.includes("message can't be deleted for everyone")) {
        console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.");
      } else {
        console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞:", error);
      }
    }

    let data;
    if (lesson.isBrigadeType) {
      data = await getQueue(lesson.name + "_priorities");
      data.sort((a, b) => {
        if (a.brigade_num < b.brigade_num) return -1;
        if (a.brigade_num > b.brigade_num) return 1;
        return 0;
      });
    } else {
      let students = await getAllUsers();
      data = [];
      students.sort((a, b) => {
        if (a.surname < b.surname) return -1;
        if (a.surname > b.surname) return 1;
        return 0;
      });

      for (let student of students) {
        data.push({
          surname: student.surname,
          priority: await getPriorityForLessonByID(student.tg_id, lesson),
        });
      }
    }
    await generateQueueTable(data, lesson, null, true);

    let photoMessage = await ctx.replyWithPhoto(
      new InputFile(`./src/tables/${subject}PriorityTable.png`)
    );
    ctx.session.photoMessageId = photoMessage.message_id;

    await ctx.reply(
      "üíª *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã?*\n\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ç–æ–≥–æ," +
        `—á—Ç–æ–±—ã —Å—Ç—É–¥–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—Å–ø–µ–ª–∏ —Å–¥–∞—Ç—å ${
          lesson.workType == "lab" ? "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É" : "–ü–ó"
        }, –∏–º–µ–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å` +
        "—Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ\\.\n\n" +
        "*–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:*\n\n" +
        "üü• __*–ö—Ä–∞—Å–Ω—ã–π*__ \\- –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—ë—Ç—Å—è –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ __*–≤–æ–æ–±—â–µ –Ω–µ –∏–º–µ–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–æ–π—Ç–∏*__ –∏ —Å–¥–∞—Ç—å \\(–Ω–µ —É—Å–ø–µ–ª –ø–æ –æ—á–µ—Ä–µ–¥–∏\\)\n" +
        `üü® __*–ñ—ë–ª—Ç—ã–π*__ \\- –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—ë—Ç—Å—è, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –∑–∞ –ø–∞—Ä—É __*–ø–æ–ø—Ä–æ–±–æ–≤–∞–ª —Å–¥–∞—Ç—å*__ ${
          lesson.workType == "lab" ? "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É" : "–ü–ó"
        }, –Ω–æ __*–Ω–µ —Å–¥–∞–ª*__\n` +
        `üü© __*–ó–µ–ª—ë–Ω—ã–π*__ \\- –¥–∞—ë—Ç—Å—è –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç __*—Å–¥–∞–ª*__ ${
          lesson.workType == "lab" ? "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É" : "–ü–ó"
        } ` +
        `_\\(–µ—Å–ª–∏ —Å–¥–∞–≤–∞–ª–æ—Å—å 2 ${
          lesson.workType == "lab" ? "–ª–∞–±—ã" : "–ü–ó"
        }, –Ω–æ –±—ã–ª–∞ —Å–¥–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞, —Ç–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–∞—ë—Ç—Å—è –∑–µ–ª—ë–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\\)_\n` +
        `üü™ __*–§–∏–æ–ª–µ—Ç–æ–≤—ã–π*__ \\- __*—Å–∞–Ω–∫—Ü–∏–∏*__, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç —Ä–µ—à–∏–ª —Å –∫–µ–º\\-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å—Å—è –æ—á–µ—Ä–µ–¥—å—é –≤–æ –≤—Ä–µ–º—è —Å–¥–∞—á–∏ ${
          lesson.workType == "lab" ? "–ª–∞–±" : "–ü–ó"
        }\n\n` +
        "–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞ –≤—ã—à–µ",
      {
        parse_mode: "MarkdownV2",
        reply_markup: returnToLessonQueue(subject),
      }
    );
  });

  bot.callbackQuery(/(passed|notPassed|notPsbl):(\w+)/, async (ctx) => {
    await ctx.answerCallbackQuery();

    const action = ctx.match[1];
    const subject = ctx.match[2];
    const lesson = lessons.find((ls) => ls.name === subject);

    let priority;
    let message;

    const userInfo = await getInfoById(ctx.from.id.toString());
    let brigade_num;
    if (lesson.isBrigadeType) {
      const queue = await getQueue(subject);
      brigade_num = await getBrigadeNum(lesson.name, userInfo.tg_id);
      const line = queue.find((l) => l.brigade_num == brigade_num);
      if (line.isPriorityGiven) {
        await ctx.callbackQuery.message.editText(
          "–û–¥–∏–Ω –∏–∑ —á–ª–µ–Ω–æ–≤ –≤–∞—à–µ–π –±—Ä–∏–≥–∞–¥—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
          {
            parse_mode: "MarkdownV2",
            reply_markup: getReturnKeyboard(false, lesson.name),
          }
        );
        return;
      }
      await setPriorityStatus(brigade_num, true, lesson.name);
    }

    // if (subject == "BZCH") {
    //   if (await getBZCHStatus(userInfo.brigade_id)) {
    //   } else {
    //     await setPriorityStatus(userInfo.brigade_id, true);
    //   }
    // }

    if (action === "passed") {
      priority = "–ó–µ–ª—ë–Ω—ã–π";
      message = `*üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å–æ —Å–¥–∞—á–µ–π\\!*\n\n_üü© –í–∞–º –≤—ã–¥–∞–Ω –∑–µ–ª—ë–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç_`;
    } else if (action === "notPassed") {
      priority = "–ñ—ë–ª—Ç—ã–π";
      message = `*üòî –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ\\!*\n–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å —á—É—Ç—å –ø–µ—Ä–≤–µ–µ –¥—Ä—É–≥–∏—Ö\n\nüü® _–í–∞–º –≤—ã–¥–∞–Ω –∂—ë–ª—Ç—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç_`;
    } else if (action === "notPsbl") {
      priority = "–ö—Ä–∞—Å–Ω—ã–π";
      message = `*‚òπÔ∏è –û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏\\.*\n–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É –æ–¥–Ω–∏–º\\(\\-–æ–π\\) –∏–∑ –ø–µ—Ä–≤—ã—Ö\n\n_üü• –í–∞–º –≤—ã–¥–∞–Ω –∫—Ä–∞—Å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç_`;
    }

    if (lesson.isBrigadeType) {
      await setPriorityByBrigadeNum(brigade_num, priority, lesson.name);
    } else {
      await setPriority(userInfo.tg_id, priority, lesson.name);
    }
    // if (subject == "KProg") {
    //   await setPriority(userInfo.tg_id, priority);
    // } else {
    //   await setBZCHPriority(userInfo.brigade_id, priority);
    // }

    await ctx.callbackQuery.message.editText(message, {
      parse_mode: "MarkdownV2",
      reply_markup: getReturnKeyboard(false, subject),
    });
  });
}

module.exports = { priorityCommand };
