const { 
    regKeyboard, 
    menuKeyboard, 
    returnToMenuKeyboard, 
    queueKeyboard, 
    returnToQueueKeyboard, 
    kprogPriorityKeyBoard, 
    returnToKProg,
    adminKeyboard,
    setPriorityKeyboard
} = require('./keyboards'); // –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä

const { InputFile } = require('grammy');
const { students } = require('./students/students');
const { 
    insertIntoDatabase, 
    isRegistered, 
    getInfoById, 
    getAllUsers, 
    insertToKProg, 
    getKProgQueue, 
    setPriority,
    isInUsers, 
    setPriorityBySurname
} = require('./database/database');

const { showMenu } = require('./menu');
const { generatePriorityTable, generateQueueTable } = require('./tables/tables') 
const { lessons } = require ('./lessons/lessons')
const config = require('./config.json');



function commands(bot) {

    bot.command('start', async (ctx) => {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (ctx.session.step === 'waiting_for_name') {

            // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ ctx.session –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
            ctx.session.photoMessageId = ctx.session.photoMessageId || undefined;
            ctx.session.KProgPhotoMessageId = ctx.session.KProgPhotoMessageId || undefined;

            await ctx.reply('‚ùó–í—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è.');
            return;
        }

        await ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–¥–∞—á—É –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç.');
        
        try {
            let isUserRegistered = await isRegistered(ctx.msg.from.id);
            if (!isUserRegistered) {
            await ctx.reply('üìã –î–∞–≤–∞–π –ø—Ä–æ–π–¥—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:', {
                reply_markup: regKeyboard // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            });
            } else {
                showMenu(ctx);
            }
        } catch (error) {
            console.error('‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        }
    });

    bot.command('menu', async (ctx) => {
        let isUserRegistered = await isRegistered(ctx.msg.from.id);
            if (!isUserRegistered) {
                await ctx.reply('‚ùó–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
                return;
            }

        if (ctx.session.step === 'waiting_for_name') {
            await ctx.reply('‚ùó–í—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è.');
            return;
        }

        showMenu(ctx);
    })

    bot.command('adminmenu', async (ctx) => {
        if (ctx.from.id === 755901230) {
            await ctx.reply("–ú–µ–Ω—é", {
                reply_markup: adminKeyboard
            });
        } else {
            await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É");
        }
    });

    bot.callbackQuery('setPr', async (ctx) => {
        await ctx.answerCallbackQuery();
        await ctx.callbackQuery.message.editText('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:', {
            parse_mode: 'MarkdownV2'
        });

        ctx.session.step = 'waiting_for_prioritySurname';
    })

    bot.callbackQuery(/set(.*)Priority/, async (ctx) => {
        const priority = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö

        const priorities = {
            "Red": "–ö—Ä–∞—Å–Ω—ã–π",
            "Yellow": "–ñ—ë–ª—Ç—ã–π",
            "Green": "–ó–µ–ª—ë–Ω—ã–π",
            "Purple": "–°–∞–Ω–∫—Ü–∏–∏"
        }
        const surname = ctx.session.surname; // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ñ–∞–º–∏–ª–∏—é
        if (surname) {
            await setPriorityBySurname(surname, priorities[priority]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            await ctx.editMessageText(`–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${surname} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${priorities[priority]}`, {
                reply_markup: kprogPriorityKeyBoard
            });
        } else {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–º–∏–ª–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
        }
        ctx.session.step = null; // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    });

    bot.callbackQuery('reg', async (ctx) => {
        await ctx.answerCallbackQuery();
        await ctx.callbackQuery.message.editText('–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:\n\n_–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤_', {
            parse_mode: 'MarkdownV2'
        });
        ctx.session.step = 'waiting_for_name';
    });

    bot.callbackQuery('profile', async (ctx) => {
        await ctx.answerCallbackQuery();
        
        try {
            let userInfo = await getInfoById(ctx.from.id.toString());
            if (userInfo) {
                await ctx.callbackQuery.message.editText(`üìä *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n*–§–∞–º–∏–ª–∏—è:* ${userInfo.surname}\n*–ò–º—è:* ${userInfo.name}\n*‚Ññ –ø–æ–¥–≥—Ä—É–ø–ø—ã:* ${userInfo.subgroup}`, {
                    parse_mode: 'MarkdownV2',
                    reply_markup: returnToMenuKeyboard
                });
            } else {
                console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º tg_id –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", error);
        }

        
    });

    bot.callbackQuery('returnToMenu', async (ctx) => {
        await ctx.answerCallbackQuery();
        await ctx.callbackQuery.message.editText(`üìñ *–ú–µ–Ω—é:*`, {
            parse_mode: 'MarkdownV2',
            reply_markup: menuKeyboard
        })
    })

    bot.callbackQuery('queue', async (ctx) => {
        if (ctx.session.KProgPhotoMessageId) {
            await ctx.api.deleteMessage(ctx.chat.id, ctx.session.KProgPhotoMessageId);
            ctx.session.KProgPhotoMessageId = undefined; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID
        }

        await ctx.answerCallbackQuery();
        await ctx.callbackQuery.message.editText(`üìí *–û—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã*`, {
            parse_mode: 'MarkdownV2',
            reply_markup: queueKeyboard
        })
    });

    bot.callbackQuery('kprog', async (ctx) => {
        await ctx.answerCallbackQuery();

        if (ctx.session.photoMessageId) {
            await ctx.api.deleteMessage(ctx.chat.id, ctx.session.photoMessageId);
            ctx.session.photoMessageId = undefined; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID
        }
        await ctx.deleteMessage();

        let status = "";
        const queue = await getKProgQueue();
        
        if (queue?.length) {
            const index = queue.findIndex(item => item.tg_id == ctx.from.id);
            if (index !== -1) {
                status = "–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É\\! –í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: "+(+index+1);
            } else {
                status = "–í—ã –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É"
            }

            await generateQueueTable(queue);
            let photoMessage = await ctx.replyWithPhoto(new InputFile("./src/tables/KProgTable.png"));
            ctx.session.KProgPhotoMessageId = photoMessage.message_id;
        } else {
            status = "_–ü–æ–∫–∞ –Ω–∏–∫–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç_";
        }
        

        
        await ctx.reply(`üíª *–û—á–µ—Ä–µ–¥—å –Ω–∞ –ö–ü—Ä–æ–≥\n\n*`+status, {
            parse_mode: 'MarkdownV2',
            reply_markup: kprogPriorityKeyBoard
        })
    });

    bot.callbackQuery('priorityInfo', async (ctx) => {
        await ctx.answerCallbackQuery();
    
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (ctx.session.KProgPhotoMessageId) {
            await ctx.api.deleteMessage(ctx.chat.id, ctx.session.KProgPhotoMessageId);
            ctx.session.KProgPhotoMessageId = undefined; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID
        }
        await ctx.deleteMessage();
    
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
        let data = await getAllUsers();
        data.sort((a, b) => {
            if (a.surname < b.surname) return -1;
            if (a.surname > b.surname) return 1;
            return 0;
        });
        console.log(data);
        await generatePriorityTable(data);
    
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        let photoMessage = await ctx.replyWithPhoto(new InputFile("./src/tables/priorityTable.png"));
        ctx.session.photoMessageId = photoMessage.message_id;
    
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await ctx.reply(
            'üíª *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã?*\n\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ç–æ–≥–æ,' 
            +'—á—Ç–æ–±—ã —Å—Ç—É–¥–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—Å–ø–µ–ª–∏ —Å–¥–∞—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É, –∏–º–µ–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å' 
            +'—Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ\\.\n\n'
            +'*–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:*\n\n'
            +'üü• __*–ö—Ä–∞—Å–Ω—ã–π*__ \\- –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—ë—Ç—Å—è –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ __*–≤–æ–æ–±—â–µ –Ω–µ –∏–º–µ–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–æ–π—Ç–∏*__ –∏ —Å–¥–∞—Ç—å \\(–Ω–µ —É—Å–ø–µ–ª –ø–æ –æ—á–µ—Ä–µ–¥–∏\\)\n'
            +'üü® __*–ñ—ë–ª—Ç—ã–π*__ \\- –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—ë—Ç—Å—è, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –∑–∞ –ø–∞—Ä—É __*–ø–æ–ø—Ä–æ–±–æ–≤–∞–ª —Å–¥–∞—Ç—å*__ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É, –Ω–æ __*–Ω–µ —Å–¥–∞–ª*__\n'
            +'üü© __*–ó–µ–ª—ë–Ω—ã–π*__ \\- –¥–∞—ë—Ç—Å—è –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç __*—Å–¥–∞–ª*__ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É '
            +'_\\(–µ—Å–ª–∏ —Å–¥–∞–≤–∞–ª–æ—Å—å 2 –ª–∞–±—ã, –Ω–æ –±—ã–ª–∞ —Å–¥–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞, —Ç–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–∞—ë—Ç—Å—è –∑–µ–ª—ë–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\\)_\n'
            +'üü™ __*–§–∏–æ–ª–µ—Ç–æ–≤—ã–π*__ \\- __*—Å–∞–Ω–∫—Ü–∏–∏*__, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç —Ä–µ—à–∏–ª —Å –∫–µ–º\\-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å—Å—è –æ—á–µ—Ä–µ–¥—å—é –≤–æ –≤—Ä–µ–º—è —Å–¥–∞—á–∏ –ª–∞–±\n\n'
            +'–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞ –≤—ã—à–µ',
            {
                parse_mode: 'MarkdownV2',
                reply_markup: returnToKProg
            }
        );
    });
    

    bot.callbackQuery('isp', async (ctx) => {
        await ctx.answerCallbackQuery();

        let status = "_–ü–æ–∫–∞ –Ω–∏–∫–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç_";
        await ctx.callbackQuery.message.editText(`*üñ• –û—á–µ—Ä–µ–¥—å –Ω–∞ –ò–°–ü\n\n*`+status, {
            parse_mode: 'MarkdownV2',
            reply_markup: returnToQueueKeyboard
        })
    });

    bot.callbackQuery('pzma', async (ctx) => {
        await ctx.answerCallbackQuery();

        let status = "_–ü–æ–∫–∞ –Ω–∏–∫–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç_";
        await ctx.callbackQuery.message.editText(`üìà *–û—á–µ—Ä–µ–¥—å –Ω–∞ –ü–ó–ú–ê\n\n*`+status, {
            parse_mode: 'MarkdownV2',
            reply_markup: returnToQueueKeyboard
        })
    });

    bot.callbackQuery('mcha', async (ctx) => {
        await ctx.answerCallbackQuery();

        let status = "_–ü–æ–∫–∞ –Ω–∏–∫–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç_";
        await ctx.callbackQuery.message.editText(`üë¥üèª *–û—á–µ—Ä–µ–¥—å –Ω–∞ –ú–ß–ê\n\n*`+status, {
            parse_mode: 'MarkdownV2',
            reply_markup: returnToQueueKeyboard
        })
    });

    bot.callbackQuery('bzch', async (ctx) => {
        await ctx.answerCallbackQuery();

        let status = "_–ü–æ–∫–∞ –Ω–∏–∫–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç_";
        await ctx.callbackQuery.message.editText(`üå° *–û—á–µ—Ä–µ–¥—å –Ω–∞ –ë–ñ–ß\n\n*`+status, {
            parse_mode: 'MarkdownV2',
            reply_markup: returnToQueueKeyboard
        })
    });
     
    bot.callbackQuery(/signLesson:(.+)/, async (ctx) => {
        await ctx.answerCallbackQuery();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –∏–∑ callback_data
        const lessonType = ctx.match[1]; // "kprog", "isp", –∏ —Ç.–¥.
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
        await ctx.callbackQuery.message.editText(
            `*–ó–∞–ø–∏—Å—å –Ω–∞ ${lessons.get(lessonType)}*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–Ω–æ–π \\(–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö\\), –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—É–¥–µ—Ç–µ —Å–¥–∞–≤–∞—Ç—å\\:`,
            {
                parse_mode: 'MarkdownV2',
            }
        );
    
        // –ó–∞–¥–∞—ë–º —à–∞–≥ —Å —É—á—ë—Ç–æ–º —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
        ctx.session.step = `waiting_for_${lessonType}Lab`;
    });

    bot.callbackQuery('passed', async (ctx) => {
        await ctx.answerCallbackQuery();

        await setPriority(ctx.from.id.toString(), "–ó–µ–ª—ë–Ω—ã–π");
        await ctx.callbackQuery.message.editText(`*üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å–æ —Å–¥–∞—á–µ–π\\!*\n\n_üü© –í–∞–º –≤—ã–¥–∞–Ω –∑–µ–ª—ë–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç_`, {
            parse_mode: 'MarkdownV2',
            reply_markup: kprogPriorityKeyBoard
        })
    });

    bot.callbackQuery('notPassed', async (ctx) => {
        await ctx.answerCallbackQuery();

        await setPriority(ctx.from.id.toString(), "–ñ—ë–ª—Ç—ã–π");
        await ctx.callbackQuery.message.editText(`*üòî –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ\\!*\n–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å —á—É—Ç—å –ø–µ—Ä–≤–µ–µ –¥—Ä—É–≥–∏—Ö\n\nüü® _–í–∞–º –≤—ã–¥–∞–Ω –∂—ë–ª—Ç—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç_`, {
            parse_mode: 'MarkdownV2',
            reply_markup: kprogPriorityKeyBoard
        })
    });

    bot.callbackQuery('notPsbl', async (ctx) => {
        await ctx.answerCallbackQuery();

        await setPriority(ctx.from.id.toString(), "–ö—Ä–∞—Å–Ω—ã–π");
        await ctx.callbackQuery.message.editText(`*‚òπÔ∏è –û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏\\.*\n–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É –æ–¥–Ω–∏–º\\(\\-–æ–π\\) –∏–∑ –ø–µ—Ä–≤—ã—Ö\n\n_üü• –í–∞–º –≤—ã–¥–∞–Ω –∫—Ä–∞—Å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç_`, {
            parse_mode: 'MarkdownV2',
            reply_markup: kprogPriorityKeyBoard
        })
    });

    bot.on('message', async (ctx) => {
        if (ctx.session.step === 'waiting_for_name') {
            let fullName = ctx.message.text;
            
            let name = fullName.split(" ")[0];
            fullName = name[0].toUpperCase() + name.substr(1).toLowerCase();

            if (!students.has(fullName)) {
                await ctx.reply('‚ùå *–¢–∞–∫–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ –≥—Ä—É–ø–ø–µ\\!* –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é:', {
                    parse_mode: 'MarkdownV2'
                });
                return;
            }
            
            await insertIntoDatabase(fullName, ctx.msg.from.id.toString());

            await ctx.reply(`‚úÖ –û—Ç–ª–∏—á–Ω–æ, ${students.get(fullName).name}! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!`);
            showMenu(ctx);
            
            // –û—á–∏—Å—Ç–∫–∞ —à–∞–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            ctx.session.step = null; 
        } else if (ctx.session.step === "waiting_for_kprogLab") {
            let lab = ctx.message.text;

            const KProgQueue = await getKProgQueue();
            const userInfo = await getInfoById(ctx.from.id.toString());
            const queue = [
                [[],[],[]],
                [[],[],[]]
            ]

            let subgroupIndex, userSubgpoup;
            if (config.KProgLessonType == 0) {
                queue.pop();
                queue.flat(1);
                userSubgpoup = 0;
            } else {  
                userSubgpoup = userInfo.subgroup - 1;
            }


            priorityIndex = new Map();
            priorityIndex.set("–ö—Ä–∞—Å–Ω—ã–π", 0);
            priorityIndex.set("–ñ—ë–ª—Ç—ã–π", 1);
            priorityIndex.set("–ó–µ–ª—ë–Ω—ã–π", 2);
            priorityIndex.set("–°–∞–Ω–∫—Ü–∏–∏", 2);
           
            if (KProgQueue?.length) {
                KProgQueue.forEach(item => {
                    if (config.KProgLessonType == 0) {
                        subgroupIndex = 0;
                    } else {
                        subgroupIndex = item.subgroup - 1;
                    }
                    queue[subgroupIndex][priorityIndex.get(item.priority)].push(item); 
                });
            }
            
            queue[userSubgpoup][priorityIndex.get(userInfo.priority)].push({
                tg_id: userInfo.tg_id,
                surname: userInfo.surname,
                labs: lab,
                priority: userInfo.priority,
                subgroup: userInfo.subgroup
            });

            if (config.KProgLessonType == 2) {
                [queue[0], queue[1]] = [queue[1], queue[0]];
            }

            insertToKProg(queue.flat(2));

            await ctx.reply(`‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã!`, {
                reply_markup: returnToKProg
            });
            
        } else if (ctx.session.step === "waiting_for_prioritySurname") {
            let surname = ctx.message.text;

            let isUserRegistered = await isInUsers(surname);
            if (isUserRegistered) {
                ctx.session.surname = surname;
                ctx.session.step = 'waiting_for_priority';
                await ctx.reply('–ö–∞–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—Å—Ç–∞–≤–∏—Ç—å?', {
                    reply_markup: setPriorityKeyboard
                })
            } else {
                await ctx.reply('‚ùå *–¢–∞–∫–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ –≥—Ä—É–ø–ø–µ\\!* –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é:', {
                    parse_mode: 'MarkdownV2'
                });
                ctx.session.step = null;
            }

        } else {
            await ctx.reply('‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é /menu');
        }
    });

}

module.exports = { commands };
