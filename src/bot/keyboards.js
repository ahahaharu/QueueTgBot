const { InlineKeyboard } = require('grammy');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const regKeyboard = new InlineKeyboard().text('üìã –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', 'reg');
// const yesOrNoKeyboard = new InlineKeyboard()
//     .text('–î–∞', 'reg_yes')
//     .text('–ù–µ—Ç', 'reg_no');
const menuKeyboard = new InlineKeyboard()
    .text('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile').row()
    .text('üìí –û—á–µ—Ä–µ–¥–∏', 'queue').row()

const queueKeyboard = new InlineKeyboard()
    .text('üíª–ö–ü—Ä–æ–≥', 'kprog').row()
    .text('üñ•–ò–°–ü', 'isp').row()
    .text('üìà–ü–ó–ú–ê', 'pzma').row()
    .text('üë¥üèª–ú–ß–ê', 'mcha').row()
    .text('üå°–ë–ñ–ß', 'bzch').row()
    .text('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'returnToMenu').row()


function getReturnKeyboard(condition, lessonType) {
    const kprogPriorityKeyBoard = new InlineKeyboard();

    if (condition) {
        kprogPriorityKeyBoard.text('‚úçÔ∏è–ó–∞–ø–∏—Å–∞—Ç—å—Å—è', `signLesson:${lessonType}`).row()
    }

    if (lessonType === 'kprog') {
        kprogPriorityKeyBoard.text("üìù–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã", "priorityInfo").row()
    }

    kprogPriorityKeyBoard
    .text('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥—è–º', 'queue').row()

    return kprogPriorityKeyBoard;
}

function doWithTable(lesson) {
    return new InlineKeyboard()
        .text('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä–∞ –ª–∞–± —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', `changeUsersLab:${lesson}`).row()
        .text('–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã', `deleteUserIn:${lesson}`).row()
        .text('–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É', `clear:${lesson}`).row()

}

const selectQueueKeyboard = new InlineKeyboard()
    .text('üíª–ö–ü—Ä–æ–≥', 'changeKprog').row()
    .text('üñ•–ò–°–ü', 'changeIsp').row()
    .text('üìà–ü–ó–ú–ê', 'changePzma').row()
    .text('üë¥üèª–ú–ß–ê', 'changeMcha').row()
    .text('üå°–ë–ñ–ß', 'changeBzch').row()
    .text('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'adminmenu').row()

const returnToMenuKeyboard = new InlineKeyboard().text('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'returnToMenu');

const returnToQueueKeyboard = new InlineKeyboard().text('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥—è–º ', 'queue');

const returnToKProg = new InlineKeyboard().text('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ö–ü—Ä–æ–≥ ', 'kprog');
const returnToISP = new InlineKeyboard().text('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ò–°–ü ', 'isp');
const returnToPZMA = new InlineKeyboard().text('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ü–ó–ú–ê ', 'pzma');
const returnToMCHA = new InlineKeyboard().text('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ú–ß–ê ', 'mcha');

const kprogStatusKeyboard = new InlineKeyboard()
    .text("üü©–°–¥–∞–ª(-–∞)", "passed").row()
    .text("üü®–ü–æ–¥–æ—à—ë–ª(-–ª–∞), –Ω–æ –Ω–µ —Å–¥–∞–ª(-–∞)", "notPassed").row()
    .text("üü•–ù–µ —É—Å–ø–µ–ª(-–∞) –ø–æ–¥–æ–π—Ç–∏", "notPsbl").row()


const adminKeyboard = new InlineKeyboard()
    .text("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "setPr").row()
    .text("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", "queueToChange").row()
    .text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", "sendMsg").row()



const setPriorityKeyboard = new InlineKeyboard()
    .text("üü• –ö—Ä–∞—Å–Ω—ã–π", 'setRedPriority').row()
    .text("üü® –ñ—ë–ª—Ç—ã–π", 'setYellowPriority').row()
    .text("üü© –ó–µ–ª—ë–Ω—ã–π", 'setGreenPriority').row()
    .text("üü™ –°–∞–Ω–∫—Ü–∏–∏", 'setPurplePriority').row()

function createSignButton(lessonType) {
    return new InlineKeyboard().text('‚úçÔ∏è–ó–∞–ø–∏—Å–∞—Ç—å—Å—è', `signLesson:${lessonType}`);
}



module.exports = {
    regKeyboard,
    menuKeyboard,
    returnToMenuKeyboard,
    queueKeyboard,
    returnToQueueKeyboard,
    returnToKProg,
    returnToISP,
    returnToPZMA,
    returnToMCHA,
    createSignButton,
    kprogStatusKeyboard,
    adminKeyboard,
    setPriorityKeyboard,
    getReturnKeyboard,
    selectQueueKeyboard,
    doWithTable
};
