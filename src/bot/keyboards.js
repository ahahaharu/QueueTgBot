const { InlineKeyboard } = require("grammy");
const { lessons } = require("../../data/lessons");

const menuKeyboard = new InlineKeyboard()
  .text("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "profile")
  .row()
  .text("üìí –û—á–µ—Ä–µ–¥–∏", "queue")
  .row();

const queueKeyboard = new InlineKeyboard();
lessons.forEach((lesson) => {
  queueKeyboard.text(`${lesson.emoji}${lesson.title}`, lesson.name).row();
});
queueKeyboard.text("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "returnToMenu").row();

// TODO: –ø–æ–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
function getReturnKeyboard(condition, lessonType, isQueue) {
  const keyboard = new InlineKeyboard();

  const lesson = lessons.find((ls) => ls.name === lessonType);

  if (condition) {
    keyboard.text("‚úçÔ∏è–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", `signLesson:${lessonType}`).row();
  } else {
    if (isQueue && !lesson.isBrigadeType) {
      keyboard.text("‚ùå–Ø –Ω–µ –ø—Ä–∏–¥—É –Ω–∞ –ø–∞—Ä—É", `deleteFrom:${lessonType}`).row();
    }
  }

  if (lesson.isPriority) {
    keyboard.text("üìù–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã", `priorityInfoFor:${lessonType}`).row();
  }

  keyboard.text("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥—è–º", "queue").row();

  return keyboard;
}

function confirmDelete(lessonType) {
  const confirmKeyboard = new InlineKeyboard()
    .text("–î–∞", `yesFor:${lessonType}`)
    .text("–ù–µ—Ç", `noFor:${lessonType}`);

  return confirmKeyboard;
}

function doWithTable(lesson) {
  const doWithKeyboard = new InlineKeyboard()
    .text(
      `–£–¥–∞–ª–∏—Ç—å ${lesson.isBrigadeType ? "–±—Ä–∏–≥–∞–¥—É" : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"} –∏–∑ —Ç–∞–±–ª–∏—Ü—ã`,
      `deleteUserIn:${lesson.name}`
    )
    .row();

  if (lesson.isPriority) {
    doWithKeyboard
      .text(
        `–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ${
          lesson.isBrigadeType ? "–±—Ä–∏–≥–∞–¥–µ" : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        }`,
        `deleteUserIn:${lesson.name}`
      )
      .row();
  }
  doWithKeyboard
    .text("–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", `clear:${lesson.name}`)
    .row()
    .text("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–∞–±–ª–∏—Ü–∞–º", `queueToChange`)
    .row();
  return doWithKeyboard;
}

const selectQueueKeyboard = new InlineKeyboard();
lessons.forEach((lesson) => {
  selectQueueKeyboard
    .text(`${lesson.emoji}${lesson.title}`, `change:${lesson.name}`)
    .row();
});
selectQueueKeyboard.text("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é", "adminmenu").row();

const returnToMenuKeyboard = new InlineKeyboard().text(
  "‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
  "returnToMenu"
);

const returnToQueueKeyboard = new InlineKeyboard().text(
  "‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥—è–º ",
  "queue"
);

function returnToLessonQueue(lesson) {
  const returnKeyboard = new InlineKeyboard().text(
    `‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ ${lessons.find((ls) => ls.name === lesson).title} `,
    `${lesson}`
  );
  return returnKeyboard;
}

function createStatusKeyboard(subject) {
  return new InlineKeyboard()
    .text("üü©–°–¥–∞–ª(-–∞)", `passed:${subject}`)
    .row()
    .text("üü®–ü–æ–¥–æ—à—ë–ª(-–ª–∞), –Ω–æ –Ω–µ —Å–¥–∞–ª(-–∞)", `notPassed:${subject}`)
    .row()
    .text("üü•–ù–µ —É—Å–ø–µ–ª(-–∞) –ø–æ–¥–æ–π—Ç–∏", `notPsbl:${subject}`)
    .row();
}

const adminKeyboard = new InlineKeyboard()
  .text("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", "queueToChange")
  .row()
  .text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", "sendMsg")
  .row();

const setPriorityKeyboard = new InlineKeyboard()
  .text("üü• –ö—Ä–∞—Å–Ω—ã–π", "setRedPriority")
  .row()
  .text("üü® –ñ—ë–ª—Ç—ã–π", "setYellowPriority")
  .row()
  .text("üü© –ó–µ–ª—ë–Ω—ã–π", "setGreenPriority")
  .row()
  .text("üü™ –°–∞–Ω–∫—Ü–∏–∏", "setPurplePriority")
  .row();

function createSignButton(lessonType) {
  return new InlineKeyboard().text("‚úçÔ∏è–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", `signLesson:${lessonType}`);
}

module.exports = {
  menuKeyboard,
  returnToMenuKeyboard,
  queueKeyboard,
  returnToQueueKeyboard,
  createSignButton,
  createStatusKeyboard,
  adminKeyboard,
  setPriorityKeyboard,
  getReturnKeyboard,
  selectQueueKeyboard,
  doWithTable,
  confirmDelete,
  returnToLessonQueue,
};
