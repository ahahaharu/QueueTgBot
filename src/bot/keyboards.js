const { InlineKeyboard } = require('grammy');
const { lessons } = require('../lessons/lessons');

//TODO: —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –ø–æ–∏–ø–∞—Å—Ç–æ–º –∏ –ø–æ—á–∏—Å—Ç–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

const menuKeyboard = new InlineKeyboard()
    .text('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile').row()
    .text('üìí –û—á–µ—Ä–µ–¥–∏', 'queue').row()

const queueKeyboard = new InlineKeyboard()
    .text('üíª–ö–ü—Ä–æ–≥', 'kprog').row()
    .text('üñ•–ò–°–ü', 'isp').row()
    .text('üìà–ü–ó–ú–ê', 'pzma').row()
    .text('üë¥üèª–ú–ß–ê', 'mcha').row()
    .text('üå°–ë–ñ–ß', 'bzch').row()
    .text('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'returnToMenu').row()


function getReturnKeyboard(condition, lessonType, isQueue) {
    const kprogPriorityKeyBoard = new InlineKeyboard();

    if (condition) {
        kprogPriorityKeyBoard.text('‚úçÔ∏è–ó–∞–ø–∏—Å–∞—Ç—å—Å—è', `signLesson:${lessonType}`).row()
    } else {
        if (isQueue && lessonType != 'BZCH') {
            kprogPriorityKeyBoard.text('‚ùå–Ø –Ω–µ –ø—Ä–∏–¥—É –Ω–∞ –ø–∞—Ä—É', `deleteFrom:${lessonType}`).row()
        }
    }

    if (lessonType === 'KProg' || lessonType === 'BZCH') {
        kprogPriorityKeyBoard.text("üìù–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã", `priorityInfoFor:${lessonType}`).row()
    } 

    kprogPriorityKeyBoard
    .text('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥—è–º', 'queue').row()

    return kprogPriorityKeyBoard;
}

function confirmDelete(lessonType) {
    const confirmKeyboard = new InlineKeyboard()
        .text("–î–∞", `yesFor:${lessonType}`)
        .text("–ù–µ—Ç", `noFor:${lessonType}`)

    return confirmKeyboard;
}

function doWithTable(lesson) {
    return new InlineKeyboard()
        .text('–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã', `deleteUserIn:${lesson}`).row()
        .text('–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É', `clear:${lesson}`).row()

}

const selectQueueKeyboard = new InlineKeyboard()
    .text('üíª–ö–ü—Ä–æ–≥', 'changeKprog').row()
    .text('üñ•–ò–°–ü', 'changeIsp').row()
    .text('üìà–ü–ó–ú–ê', 'changePzma').row()
    .text('üë¥üèª–ú–ß–ê', 'changeMcha').row()
    .text('üå°–ë–ñ–ß', 'changeBzch').row()
    .text('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'adminmenu').row()

const returnToMenuKeyboard = new InlineKeyboard().text('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'returnToMenu');

const returnToQueueKeyboard = new InlineKeyboard().text('‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—á–µ—Ä–µ–¥—è–º ', 'queue');

function returnToLessonQueue(lesson) {
    const returnKeyboard = new InlineKeyboard().text(`‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ ${lessons.get(lesson)} `, `${lesson.toLowerCase()}`);
    return returnKeyboard;
}

function createStatusKeyboard(subject) {
    return new InlineKeyboard()
        .text("üü©–°–¥–∞–ª(-–∞)", `passed:${subject}`).row()
        .text("üü®–ü–æ–¥–æ—à—ë–ª(-–ª–∞), –Ω–æ –Ω–µ —Å–¥–∞–ª(-–∞)", `notPassed:${subject}`).row()
        .text("üü•–ù–µ —É—Å–ø–µ–ª(-–∞) –ø–æ–¥–æ–π—Ç–∏", `notPsbl:${subject}`).row();
}


const adminKeyboard = new InlineKeyboard()
    .text("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "setPr").row()
    .text("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", "queueToChange").row()
    .text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", "sendMsg").row()
    .text("–£–¥–∞–ª–∏—Ç—å –±—Ä–∏–≥–∞–¥—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã", 'deleteBrigade').row()
    .text("–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ö–ü—Ä–æ–≥", 'updateKProg').row()



const setPriorityKeyboard = new InlineKeyboard()
    .text("üü• –ö—Ä–∞—Å–Ω—ã–π", 'setRedPriority').row()
    .text("üü® –ñ—ë–ª—Ç—ã–π", 'setYellowPriority').row()
    .text("üü© –ó–µ–ª—ë–Ω—ã–π", 'setGreenPriority').row()
    .text("üü™ –°–∞–Ω–∫—Ü–∏–∏", 'setPurplePriority').row()

function createSignButton(lessonType) {
    return new InlineKeyboard().text('‚úçÔ∏è–ó–∞–ø–∏—Å–∞—Ç—å—Å—è', `signLesson:${lessonType}`);
}



module.exports = {
    menuKeyboard,
    returnToMenuKeyboard,
    queueKeyboard,
    returnToQueueKeyboard,
    createSignButton,
    createStatusKeyboard,
    adminKeyboard,
    setPriorityKeyboard,
    getReturnKeyboard,
    selectQueueKeyboard,
    doWithTable,
    confirmDelete, 
    returnToLessonQueue
};
